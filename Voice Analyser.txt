//part one
import librosa
import turtle
from pylab import*
from tkinter import*
from scipy.io import wavfile

def formulas():
    #'ang' or a valid audio file
    y,sr= librosa.core.load('CAlm.wav')
    sampFreq,snd=wavfile.read('CAlm.wav')
    snd.shape
    snd.shape[0]/sampFreq
    s1=snd[:,0]
    timeArray=arange(0,snd.shape[0],1)
    timeArray=timeArray/sampFreq
    timeArray=timeArray*1000;
    
    n=len(s1)
    p=fft(s1)
    nUniquePts=int(ceil((n+1)/2.0))
    p=p[0:nUniquePts]
    p=abs(p)
    p=p/float(n)
    p=p**2
    if n%2>0:
        p[1:len(p)]=p[1:len(p)]*2
    else:
        p[1:len(p)]=p[1:len(p)]*2
    freqArray=arange(0,nUniquePts,1.0)*(sampFreq/n)

    avg_loud=abs(s1.mean())
    power=mean(p)
    a=10*log10(avg_loud)
    print(avg_loud)
    return [avg_loud,power]


//part Two
import librosa

y,sr= librosa.core.load('CAlm.wav')

# Read in a WAV and find the freq's
import pyaudio
import wave
import numpy as np

chunk = 2048

# open up a wave
wf = wave.open('CAlm.wav', 'rb')
swidth = wf.getsampwidth()
RATE = wf.getframerate()
# use a Blackman window
window = np.blackman(chunk)
# open stream
p = pyaudio.PyAudio()
stream = p.open(format =
                p.get_format_from_width(wf.getsampwidth()),
                channels = wf.getnchannels(),
                rate = RATE,
                output = True)

# read some data
data = wf.readframes(chunk)
# play stream and find the frequency of each chunk
while len(data) == chunk*swidth:
    # write data out to the audio stream
    #stream.write(data)
    # unpack the data and times by the hamming window
    indata = np.array(wave.struct.unpack("%dh"%(len(data)/swidth),\
                                         data))*window
    # Take the fft and square each value
    fftData=abs(np.fft.rfft(indata))**2
    # find the maximum
    which = fftData[1:].argmax() + 1
    # use quadratic interpolation around the max
    if which != len(fftData)-1:
        y0,y1,y2 = np.log(fftData[which-1:which+2:])
        x1 = (y2 - y0) * .5 / (2 * y1 - y2 - y0)
        # find the frequency and output it
        thefreq = (which+x1)*RATE/chunk
        print(thefreq)
    else:
        thefreq = which*RATE/chunk
        print(thefreq)
    # read some more data
    data = wf.readframes(chunk)
#if data:
    #stream.write(data)
stream.close()
p.terminate()

from pylab import*

from scipy.io import wavfile

sampFreq,snd=wavfile.read('BMT.wav')

snd.shape

snd.shape[0]/sampFreq

s1=snd[:,0]
timeArray=arange(0,snd.shape[0],1)
timeArray=timeArray/sampFreq
timeArray=timeArray*1000;

plot(timeArray,s1,color='k')



//Part Three(obtain average)
avg_loud=(abs(s1.mean()))
a=10*log10(avg_loud)
tTime=librosa.get_duration(y=y, sr=sr)

//Part Four(UI)
root=Tk()
root.configure(background='grey')
root.geometry("750x500")
label=Label(root,text="Emotion Analysis",font=("Georgia",44),fg='white',bg='mediumpurple1')
label.pack(side=TOP,padx=20,pady=20)
button=Button(root,height=1,width=10,text='Analyse',font=("Georgia",28),fg='white',bg='mediumpurple1',command=formulas)
button.pack(side='top',padx=20,pady=20)
# button1=Button(root, height=1, width=10, text='Output', font=("Georgia",28),fg='white',bg='mediumpurple1',command=graphs)
# button1.pack(side='bottom', padx=30, pady=30)
root.mainloop()


//Part Five
amp=formulas()[0]
pw=formulas()[1]


//Part Six(Result)
smiles=turtle.Turtle()
wn=turtle.Screen()
wn.setup(width=1.0, height=1.0, startx=None, starty=None)

if amp>=1:
    smiles.penup()
    smiles.goto(-105,155)
    smiles.pendown()
    smiles.goto(-45,115)

    smiles.penup()
    smiles.goto(-75,75)
    smiles.pendown()
    smiles.circle(10)

    smiles.penup()
    smiles.goto(105,155)
    smiles.pendown()
    smiles.goto(45,115)

    smiles.penup()
    smiles.goto(75,75)
    smiles.pendown()
    smiles.circle(10)

    smiles.penup()
    smiles.goto(0,25)
    smiles.pendown()
    smiles.circle(-100,80)

    smiles.penup()
    smiles.setheading(180)
    smiles.goto(0,25)
    smiles.pendown()
    smiles.circle(100,80)

    smiles.penup()
    smiles.goto(0,-150)
    smiles.write("You are Angry..... Calm Down!", align="center", font=("Times New Roman", 42, "bold"))
    smiles.goto(0, -250)
    #smiles.write("BP risingggGGGG....", align="center", font=("Times New Roman", 60, "bold"))
    wn = turtle.Screen()
    wn.bgcolor("red")
    
elif amp>=0.1 and pw>5:
    smiles.penup()
    smiles.goto(-105,135)
    smiles.pendown()
    smiles.goto(-75,165)
    smiles.goto(-45,135)

    smiles.penup()
    smiles.goto(-75,75)
    smiles.pendown()
    smiles.circle(10)

    smiles.penup()
    smiles.goto(105,135)
    smiles.pendown()
    smiles.goto(75,165)
    smiles.goto(45,135)

    smiles.penup()
    smiles.goto(75,75)
    smiles.pendown()
    smiles.circle(10)

    smiles.penup()
    smiles.goto(0,-25)
    smiles.pendown()
    smiles.circle(100,80)

    smiles.penup()
    smiles.setheading(180)
    smiles.goto(0,-25)
    smiles.pendown()
    smiles.circle(-100,80)

    smiles.penup()
    smiles.goto(0,-150)
    smiles.write("Always have that SMILE on your face!", align="center", font=("Times New Roman", 42, "bold"))
    wn = turtle.Screen()
    wn.bgcolor("yellow")
    
else:
    smiles.penup()
    smiles.goto(-75,75)
    smiles.pendown()
    smiles.circle(10)

    smiles.penup()
    smiles.goto(75,75)
    smiles.pendown()
    smiles.circle(10)

    smiles.penup()
    smiles.goto(0,-25)
    smiles.pendown()
    smiles.goto(100,-25)

    #smiles.circle(100,80)

    smiles.penup()
    smiles.setheading(180)
    smiles.goto(0,-25)
    smiles.pendown()
    smiles.goto(-100,-25)

    #smiles.circle(-100,80)

    smiles.penup()
    smiles.goto(0,-150)
    smiles.write("You seem to be depressed... Let me help you out!", align="center", font=("Times New Roman", 42, "bold"))

    wn.bgcolor("#0000b3")
    
turtle.done()